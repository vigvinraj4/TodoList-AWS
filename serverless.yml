service: Todolist-aws-resources

frameworkVersion: '3'

package:
  individually: true
  exclude:
    - .git/**
    - node_modules/**
    - .venv/**
  include:
    - '!*'
    - '!**'
    - src/*.js
plugins:
  - serverless-offline
 

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-southeast-2
#In the field of Environment We would defining the unique id of the resources that had been created in the resources section
#We use Ref: attribute to refer the id's that had been generated during the deployement phase 
  environment:
      REGION: ap-southeast-2
      user_pool_id: ap-southeast-2_Q5to0vpJh
      client_id: 2n19a3gsgt8i7doq2q8oid226a
  iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminInitiateAuth
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminSetUserPassword
          - cognito-idp:AdminDisableUser
          - cognito-idp:AdminResetUserPassword
          - cognito-idp:AdminDeleteUser
        Resource: "*"
resources:
    Resources:
      userTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: userTable
          SSESpecification:
            SSEEnabled: true
          AttributeDefinitions:
            - AttributeName: userName
              AttributeType: S
            - AttributeName: SK
              AttributeType: S
          KeySchema:
            - AttributeName: userName
              KeyType: HASH
            - AttributeName: SK
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
functions:
  authenticate:
      description: this lambda is used for authenticate the api gateway before allowing any access.
      handler: src/auth/authorizer.lambdaFunction

  userSignup:
      description: sign up user with cognito adminCreateUser.
      handler: src/userSignup.lambdaFunction
      events:
        - http:
            method: post
            path: userSignup
            cors: true     
  userConfirm:
      description: This API is used for confirming email address with the verification code.
      handler: src/userConfirm.lambdaFunction
      events:
        - http:
            method: post
            path: userConfirm
            cors: true    
  resendConfirmation:
      description: This API is used for  resendingconfirmation code for the specified email address with the verification code.
      handler: src/resendConfirmationCode.lambdaFunction
      events:
        - http:
            method: post
            path: resendConfirmationCode
            cors: true 
  userLogin:
      description: This API is used for  authenticating a user.
      handler: src/login.lambdaFunction
      events:
        - http:
            method: post
            path: login
            cors: true 
  userLogout:
      description: This API is used for  making the user signout.
      handler: src/userLogOut.lambdaFunction
      events:
        - http:
            method: post
            path: logout
            cors: true 
  disableUser:
      description: This API is used for  disabling the user account.
      handler: src/disableUser.lambdaFunction
      events:
        - http:
            method: post
            path: disableUsers
            cors: true
            authorizer: 
              name: authenticate
              
  deleteUser:
      description: This API is used for deleting the user account.
      handler: src/deleteUser.lambdaFunction
      events:
        - http:
            method: post
            path: deleteUsers
            cors: true
            authorizer: 
              name: authenticate

